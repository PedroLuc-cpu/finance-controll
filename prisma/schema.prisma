datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String          @id @default(cuid())
  name                 String?         @unique
  email                String?         @unique
  password             String?
  passwordResetCode    String?         @default("")
  passwordResetExpires DateTime?
  confirmedPassword    String?
  emailVerified        DateTime?
  isNotification       String?
  image                String?
  accounts             Account[]
  sessions             Session[]
  // Optional for WebAuthn support
  Authenticator        Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Produto {
  id           String     @id @default(uuid())
  nome         String
  descricao    String?
  categoria    Categoria? @relation(fields: [categoriaId], references: [id])
  categoriaId  String?
  codigoBarras String?
  marca        Marca?     @relation(fields: [marcaId], references: [id])
  marcaId      String?
  // Informações do Fornecedor
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])
  fornecedorId String

  // Informações de Estoque
  unidadeMedida     String
  quantidadeEstoque Int
  precoCusto        Float
  precoVenda        Float
  dataValidade      DateTime?

  // Informações de Controle de Qualidade
  lote               String?
  dataFabricacao     DateTime?
  certificadoINMETRO String?

  // Informações Regulamentares
  registroANVISA String?
  avisoLegal     String?

  // Outros
  pesoBruto   Float?
  pesoLiquido Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fornecedor {
  id       String    @id @default(uuid())
  nome     String
  cnpj     String
  endereco String
  telefone String
  produtos Produto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Marca {
  id      String    @id @default(uuid())
  marca   String
  Produto Produto[]
}

model Categoria {
  id        String    @id @default(uuid())
  categoria String
  Produto   Produto[]
}
